What is Python Operator?
Python operator is a symbol that performs an operation on one or more operands. An operand is a variable or a value on which we perform the operation.

Python Operator falls into 7 categories:

Python Arithmetic Operator
Python Relational Operator
Python Assignment Operator
Python Logical Operator
Python Membership Operator
Python Identity Operator
Python Bitwise Operator
1. Arithmetic Operators in Python
These Python arithmetic operators include Python operators for basic mathematical operations.

Python Operator
Arithmetic Operators in Python

a. Addition(+)
Adds the values on either side of the operator.

>>> 3+4
Output

7
CHECK YOUR KNOWLEDGE – How to use + Operator for concatenation?

Comment, if you know the answer, else check the article – Frequently asked Python Interview Questions

b. Subtraction(-)
Subtracts the value on the right from the one on the left.

>>> 3-4
Output

-1
c. Multiplication(*)
Multiplies the values on either side of the operator.

>>> 3*4
Output

12
d. Division(/)
Divides the value on the left by the one on the right. Notice that division results in a floating-point value.

>>> 3/4
Output

0.75
e. Exponentiation(**)
Raises the first number to the power of the second.

>>> 3**4
Output

81
f. Floor Division(//)
Divides and returns the integer value of the quotient. It dumps the digits after the decimal.

>>> 3//4
>>> 4//3
Output

1
>>> 10//3
Output

3
g. Modulus(%)
Divides and returns the value of the remainder.

>>> 3%4
Output

3
>>> 4%3
Output

1
>>> 10%3
Output

1
>>> 10.5%3
Output

1.5
If you face any query in Python Operator with examples, ask us in the comment.

2. Python Relational Operator
Python Operator
Relational Operators in Python

Relational Python Operator carries out the comparison between operands.

They tell us whether an operand is greater than the other, lesser, equal, or a combination of those.

a. Less than(<)
This operator checks if the value on the left of the operator is lesser than the one on the right.

>>> 3<4
Output

True
b. Greater than(>)
It checks if the value on the left of the operator is greater than the one on the right.

>>> 3>4
Output

False
c. Less than or equal to(<=)
It checks if the value on the left of the operator is lesser than or equal to the one on the right.

>>> 7<=7
Output

True
d. Greater than or equal to(>=)
It checks if the value on the left of the operator is greater than or equal to the one on the right.

>>> 0>=0
Output

True
e. Equal to(= =)
This operator checks if the value on the left of the operator is equal to the one on the right.

1 is equal to the Boolean value True, but 2 isn’t. Also, 0 is equal to False.

>>> 3==3.0
Output

True
>>> 1==True
Output

True
>>> 7==True
Output

False
>>> 0==False
Output

True
>>> 0.5==True
Output

False
f. Not equal to(!=)
It checks if the value on the left of the operator is not equal to the one on the right.

The Python operator <> does the same job, but has been abandoned in Python 3.

When the condition for a relative operator is fulfilled, it returns True. Otherwise, it returns False. You can use this return value in a further statement or expression.

>>> 1!=1.0
Output

False
>>> -1<>-1.0
#This causes a syntax error

3. Python Assignment Operator
Python Operator
Assignment Operators in Python

Python assignment operator assigns a value to a variable. It may manipulate the value by a factor before assigning it.

We have 8 assignment operators- one plain, and seven for the 7 arithmetic python operators.

a. Assign(=)
Assigns a value to the expression on the left. Notice that = = is used for comparing, but = is used for assigning.

>>> a=7
>>> print(a)
Output

7

b. Add and Assign(+=)
Adds the values on either side and assigns it to the expression on the left. a+=10 is the same as a=a+10.

The same goes for all the next assignment operators.

>>> a+=2
>>> print(a)
Output

9
c. Subtract and Assign(-=)
Subtracts the value on the right from the value on the left. Then it assigns it to the expression on the left.

>>> a-=2
>>> print(a)
Output

7
d. Divide and Assign(/=)
Divides the value on the left by the one on the right. Then it assigns it to the expression on the left.

>>> a/=7
>>> print(a)
Output

1.0
e. Multiply and Assign(*=)
Multiplies the values on either sides. Then it assigns it to the expression on the left.

>>> a*=8
>>> print(a)
Output

8.0
DON’T MISS!! Top Python Projects with Source Code

f. Modulus and Assign(%=)
Performs modulus on the values on either side. Then it assigns it to the expression on the left.

>>> a%=3
>>> print(a)
Output

2.0
g. Exponent and Assign(**=)
Performs exponentiation on the values on either side. Then assigns it to the expression on the left.

>>> a**=5
>>> print(a)
Output

32.0
h. Floor-Divide and Assign(//=)
Performs floor-division on the values on either side. Then assigns it to the expression on the left.

>>> a//=3
>>> print(a)
Output

10.0
This is one of the important Python Operator.

4. Python Logical Operator
These are conjunctions that you can use to combine more than one condition.

We have three Python logical operator – and, or, and not that come under python operators.

Python Operator
Logical Operators in Python

a. and Operator in Python
If the conditions on both sides of the operator are true, then the expression as a whole is true.

>>> a=7>7 and 2>-1
>>> print(a)
Output

False
b. or Operator in Python
The expression is false only if both the statements around the operator are false. Otherwise, it is true.

>>> a=7>7 or 2>-1
>>> print(a)
Output

True
‘and’ returns the first False value or the last value; ‘or’ returns the first True value or the last value

>>> 7 and 0 or 5
Output

5
c. not Operator in Python
This inverts the Boolean value of an expression. It converts True to False, and False to True.

As you can see below, the Boolean value for 0 is False. So, not inverts it to True.

>>> a=not(0)
>>> print(a)
Output

True
5. Membership Python Operator
These operators test whether a value is a member of a sequence. The sequence may be a list, a string, or a tuple.

We have two membership python operators- ‘in’ and ‘not in’.

a. in Operator in Python
This checks if a value is a member of a sequence.

In our example, we see that the string ‘fox’ does not belong to the list pets. But the string ‘cat’ belongs to it, so it returns True.

Also, the string ‘me’ is a substring to the string ‘disappointment’. Therefore, it returns true.

>>> pets=[‘dog’,’cat’,’ferret’]
>>> ‘fox’ in pets
Output

False
>>> ‘cat’ in pets
Output

True
>>> ‘me’ in ‘disappointment’
Output

True
b. not in Operator in Python
Unlike ‘in’, ‘not in’ checks if a value is not a member of a sequence.

>>> ‘pot’ not in ‘disappointment’
Output

True
In doubt yet in any Python operator with examples? Please comment.

6. Python Identity Operator
Let us proceed towards identity Python Operator.

These operators test if the two operands share an identity. We have two identity operators- ‘is’ and ‘is not’.

a. is Operator in Python
If two operands have the same identity, it returns True. Otherwise, it returns False. Here, 2 is not the same as 20, so it returns False.

Also, ‘2’ and “2” are the same. The difference in quotes does not make them different. So, it returns True.

>>> 2 is 20
Output

False
>>> ‘2’ is “2”
Output

True
b. is not Operator in Python
2 is a number, and ‘2’ is a string. So, it returns a True to that.

>>> 2 is not ‘2’
Output

True
7. Python Bitwise Operator
Bitwise operators dive beneath decimal numbers and work with the binary bits — the 0s and 1s inside every value. They look unusual (& | ^ ~ << >>) but behave like tiny switches. & (AND) keeps only the bits that match in both numbers, while | (OR) keeps the bits that are on in either number. These tools are perfect for tasks like setting feature flags or turning sensors on and off inside hardware.

Python Operator
Bitwise Operators in Python

On the operands, these operate bit by bit.

a. Binary AND(&) Operator in Python
It performs bit by bit AND operation on the two values. Here, binary for 2 is 10, and that for 3 is 11. &-ing them results in 10, which is binary for 2.

Similarly, &-ing 011(3) and 100(4) results in 000(0).

>>> 2&3
Output

2
>>> 3&4
Output

0
b. Binary OR(|) Operator in Python
It performs bit by bit OR on the two values. Here, OR-ing 10(2) and 11(3) results in 11(3).

>>> 2|3
Output

3
c. Binary XOR(^) Operator in Python
It performs bit by bit XOR(exclusive-OR) on the two values. Here, XOR-ing 10(2) and 11(3) results in 01(1).

>>> 2^3
Output

1
d. Binary One’s Complement(~) in Python
It returns the one’s complement of a number’s binary. It flips the bits. Binary for 2 is 00000010. Its one’s complement is 11111101.

This is binary for -3. So, this results in -3. Similarly, ~1 results in -2.

>>>~-3
Output

2
Again, one’s complement of -3 is 2.

e. Binary Left-Shift(<<) Operator in Python
It shifts the value of the left operand the number of places to the left that the right operand specifies.

Here, binary of 2 is 10. 2<<2 shifts it two places to the left. This results in 1000, which is binary for 8.

>>> 2<<2
Output

8
f. Binary Right-Shift(>>) in Python
It shifts the value of the left operand the number of places to the right that the right operand specifies.

Here, binary of 3 is 11. 3>>2 shifts it two places to the right. This results in 00, which is binary for 0.

Similarly, 3>>1 shifts it one place to the right. This results in 01, which is binary for 1.

>>> 3>>2
>>> 3>>1
